import os
import asyncio
import json
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))
ADMIN_ID = [124522501, 7510196452]
USER_DB = "users.json"
REFERRAL_FILE = "referrals.json"
PROMO_INTERVAL = 21600
user_states = {}

def load_data():
    if os.path.exists(REFERRAL_FILE):
        with open(REFERRAL_FILE, "r") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(REFERRAL_FILE, "w") as f:
        json.dump(data, f)

def load_users():
    if os.path.exists(USER_DB):
        with open(USER_DB, "r") as f:
            return json.load(f)
    return {}

def save_users(data):
    with open(USER_DB, "w") as f:
        json.dump(data, f)

async def notify_admins(context, text):
    for admin_id in ADMIN_ID:
        try:
            await context.bot.send_message(chat_id=admin_id, text=text)
        except Exception as e:
            print(f"[!] Error sending to admin {admin_id}: {e}")

async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    ref_by = context.args[0] if context.args else None
    for member in update.message.new_chat_members:
        if ref_by and ref_by != str(member.id):
            data.setdefault(ref_by, [])
            if str(member.id) not in data[ref_by]:
                data[ref_by].append(str(member.id))
                save_data(data)
        await update.message.reply_text(
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url="https://t.me/promotelabot?start=group")]
            ])
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return
    user_id = update.effective_user.id
    user_states[user_id] = {}
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üë∂ –ù–æ–≤–∏—á–æ–∫", callback_data="role_–ù–æ–≤–∏—á–æ–∫"),
         InlineKeyboardButton("üöõ –û–≤–Ω–µ—Ä", callback_data="role_–û–≤–Ω–µ—Ä")],
        [InlineKeyboardButton("üß† –î–∏—Å–ø–µ—Ç—á–µ—Ä", callback_data="role_–î–∏—Å–ø–µ—Ç—á–µ—Ä"),
         InlineKeyboardButton("üí∞ –ò–Ω–≤–µ—Å—Ç–æ—Ä", callback_data="role_–ò–Ω–≤–µ—Å—Ç–æ—Ä")],
        [InlineKeyboardButton("–Ø –¥—Ä–∞–π–≤–µ—Ä", callback_data="role_–Ø –¥—Ä–∞–π–≤–µ—Ä"),
         InlineKeyboardButton("üîç –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="role_–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")]
    ])
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫—Ç–æ —Ç—ã:", reply_markup=keyboard)

async def role_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    role = query.data.split("_", 1)[1]
    user_id = query.from_user.id
    user_states[user_id] = {"role": role}

    service_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–Ø –¥—Ä–∞–π–≤–µ—Ä", callback_data="service_–Ø –¥—Ä–∞–π–≤–µ—Ä")],
        [InlineKeyboardButton("—Ö–æ—á—É –≤–∑—è—Ç—å —Ç—Ä–µ–π–ª–µ—Ä –≤ –∞—Ä–µ–Ω–¥—É", callback_data="service_—Ç—Ä–µ–π–ª–µ—Ä")],
        [InlineKeyboardButton("–Ω—É–∂–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–ø–∞–Ω–∏—é MC/DOT", callback_data="service_MC")],
        [InlineKeyboardButton("–∫—É–ø–∏—Ç—å –≥–æ—Ç–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é —Å —Ä–µ–∫–æ—Ä–¥–æ–º –∏ MC/DOT", callback_data="service_–≥–æ—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è")],
        [InlineKeyboardButton("–Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - eld", callback_data="service_eld")],
        [InlineKeyboardButton("–Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - factoring", callback_data="service_factoring")],
        [InlineKeyboardButton("–Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - accounting", callback_data="service_accounting")],
        [InlineKeyboardButton("–Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - insurance", callback_data="service_insurance")],
        [InlineKeyboardButton("–Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - registration", callback_data="service_registration")],
        [InlineKeyboardButton("–Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - safety", callback_data="service_safety")],
        [InlineKeyboardButton("–Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - compliance", callback_data="service_compliance")],
        [InlineKeyboardButton("–Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - finance", callback_data="service_finance")],
        [InlineKeyboardButton("–ø–æ–¥–±–æ—Ä —Ç—Ä–∞–∫–∞/—Ç—Ä–µ–π–ª–µ—Ä–∞", callback_data="service_–ø–æ–¥–±–æ—Ä")],
        [InlineKeyboardButton("–Ω—É–∂–µ–Ω –∞–¥–≤–æ–∫–∞—Ç/—é—Ä–∏—Å—Ç", callback_data="service_—é—Ä–∏—Å—Ç")],
        [InlineKeyboardButton("–∏—â—É –¥—Ä–∞–π–≤–µ—Ä–∞", callback_data="service_–∏—â—É –¥—Ä–∞–π–≤–µ—Ä–∞")],
        [InlineKeyboardButton("üîç –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="service_–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")]
    ])
    await query.message.reply_text("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=service_keyboard)

async def service_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    service = query.data.split("_", 1)[1]
    user_id = query.from_user.id
    user_data = user_states.get(user_id, {})
    user_data["service"] = service
    user_states[user_id] = user_data

    msg_admin = (
        f"üì• –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç @{query.from_user.username or '–±–µ–∑ username'}:"
        f"–†–æ–ª—å: {user_data.get('role', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞')}"
        f"–£—Å–ª—É–≥–∞: {service}"
    )
    await notify_admins(context, msg_admin)
    await query.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è.")

async def funnel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message.text.strip()
    state = user_states.get(user_id, {})

    if state.get("step") == "last_name":
        user_states[user_id]["last_name"] = msg
        user_states[user_id]["step"] = "first_name"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    elif state.get("step") == "first_name":
        user_states[user_id]["first_name"] = msg
        user_states[user_id]["step"] = "phone"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ Telegram @—é–∑–µ—Ä–Ω–µ–π–º:")
    elif state.get("step") == "phone":
        user_states[user_id]["phone"] = msg
        users = load_users()
        users[str(user_id)] = user_states[user_id]
        save_users(users)

        data = user_states[user_id]
        msg_admin = (
            f"üì• –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –≤–æ—Ä–æ–Ω–∫–∏:"
            f"–†–æ–ª—å: {data['role']}"
            f"–§–∞–º–∏–ª–∏—è: {data['last_name']}"
            f"–ò–º—è: {data['first_name']}"
            f"–¢–µ–ª–µ—Ñ–æ–Ω/–∫–æ–Ω—Ç–∞–∫—Ç: {data['phone']}"
        )
        await notify_admins(context, msg_admin)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        del user_states[user_id]

async def mystats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    user_id = str(update.effective_user.id)
    count = len(data.get(user_id, []))
    await update.message.reply_text(f"üìä –¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª {count} —á–µ–ª–æ–≤–µ–∫(–∞).")

async def topreferrers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    top = sorted(data.items(), key=lambda x: len(x[1]), reverse=True)[:5]
    msg = "üèÜ –¢–æ–ø –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏—Ö:"
    for uid, refs in top:
        try:
            user = await context.bot.get_chat(uid)
            msg += f"\n- {user.first_name}: {len(refs)} —á–µ–ª."
        except:
            pass
    await update.message.reply_text(msg)

async def auto_promo(app):
    while True:
        try:
            await app.bot.send_message(
                chat_id=GROUP_ID,
                text="üöÄ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ —Ä–∞—Å—Ç–∏—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ! üî•"
            )
        except Exception as e:
            print(f"[!] AutoPromo error: {e}")
        await asyncio.sleep(PROMO_INTERVAL)

async def spam_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if "http://" in message.text or "https://" in message.text or "t.me/" in message.text:
        try:
            await message.delete()
            await message.chat.kick_member(message.from_user.id)
            await message.reply_text(f"üö´ {message.from_user.first_name} –±—ã–ª —É–¥–∞–ª—ë–Ω –∑–∞ —Å—Å—ã–ª–∫–∏.")
        except:
            pass

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("mystats", mystats))
    app.add_handler(CommandHandler("topreferrers", topreferrers))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
    app.add_handler(MessageHandler(filters.TEXT & filters.Entity("url"), spam_filter))
    app.add_handler(CallbackQueryHandler(role_selected, pattern="^role_"))
    app.add_handler(CallbackQueryHandler(service_selected, pattern="^service_"))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), funnel_handler))
    app.run_polling()
