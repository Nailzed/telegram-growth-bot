import os
import asyncio
import json
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))
ADMIN_ID = 124522501
USER_DB = "users.json"
REFERRAL_FILE = "referrals.json"
PROMO_INTERVAL = 21600
user_states = {}

def load_data():
    if os.path.exists(REFERRAL_FILE):
        with open(REFERRAL_FILE, "r") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(REFERRAL_FILE, "w") as f:
        json.dump(data, f)

def load_users():
    if os.path.exists(USER_DB):
        with open(USER_DB, "r") as f:
            return json.load(f)
    return {}

def save_users(data):
    with open(USER_DB, "w") as f:
        json.dump(data, f)

async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    ref_by = None
    if context.args:
        ref_by = context.args[0]
    for member in update.message.new_chat_members:
        if ref_by and ref_by != str(member.id):
            data.setdefault(ref_by, [])
            if str(member.id) not in data[ref_by]:
                data[ref_by].append(str(member.id))
                save_data(data)
        await update.message.reply_text(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.full_name}!"
            f"üöÄ –ù–∞–ø–∏—à–∏—Ç–µ –≤ –õ–°, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø—É—Ç—å –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç:"
            f"https://t.me/promotelabot"
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    link = f"https://t.me/promotelabot?start={user_id}"
    await update.message.reply_text(f"ü§ù –í–æ—Ç —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}")

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üë∂ –ù–æ–≤–∏—á–æ–∫", callback_data="role_–ù–æ–≤–∏—á–æ–∫"),
         InlineKeyboardButton("üöõ –û–≤–Ω–µ—Ä", callback_data="role_–û–≤–Ω–µ—Ä")],
        [InlineKeyboardButton("üß† –î–∏—Å–ø–µ—Ç—á–µ—Ä", callback_data="role_–î–∏—Å–ø–µ—Ç—á–µ—Ä"),
         InlineKeyboardButton("üí∞ –ò–Ω–≤–µ—Å—Ç–æ—Ä", callback_data="role_–ò–Ω–≤–µ—Å—Ç–æ—Ä")]
    ])
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫—Ç–æ —Ç—ã:", reply_markup=keyboard)

async def role_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    role = query.data.split("_", 1)[1]
    user_id = query.from_user.id
    user_states[user_id] = {"role": role, "step": "last_name"}
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")

async def funnel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message.text.strip()
    await update.message.delete()
    state = user_states.get(user_id, {})

    if state.get("step") == "last_name":
        user_states[user_id]["last_name"] = msg
        user_states[user_id]["step"] = "first_name"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    elif state.get("step") == "first_name":
        user_states[user_id]["first_name"] = msg
        user_states[user_id]["step"] = "phone"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ Telegram @—é–∑–µ—Ä–Ω–µ–π–º:")
    elif state.get("step") == "phone":
        user_states[user_id]["phone"] = msg
        users = load_users()
        users[str(user_id)] = user_states[user_id]
        save_users(users)

        data = user_states[user_id]
        msg_admin = (
            f"üì• –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –≤–æ—Ä–æ–Ω–∫–∏:"
            f"–†–æ–ª—å: {data['role']}"
            f"–§–∞–º–∏–ª–∏—è: {data['last_name']}"
            f"–ò–º—è: {data['first_name']}"
            f"–¢–µ–ª–µ—Ñ–æ–Ω/–∫–æ–Ω—Ç–∞–∫—Ç: {data['phone']}"
        )
        await context.bot.send_message(chat_id=ADMIN_ID, text=msg_admin)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        del user_states[user_id]

async def mystats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    user_id = str(update.effective_user.id)
    count = len(data.get(user_id, []))
    await update.message.reply_text(f"üìä –¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª {count} —á–µ–ª–æ–≤–µ–∫(–∞).")

async def topreferrers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    top = sorted(data.items(), key=lambda x: len(x[1]), reverse=True)[:5]
    msg = "üèÜ –¢–æ–ø –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏—Ö:"
    for uid, refs in top:
        try:
            user = await context.bot.get_chat(uid)
            msg += f"- {user.first_name}: {len(refs)} —á–µ–ª."
        except:
            pass
    await update.message.reply_text(msg)

async def auto_promo(app):
    while True:
        try:
            await app.bot.send_message(
                chat_id=GROUP_ID,
                text="üöÄ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ —Ä–∞—Å—Ç–∏—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ! üî•"
            )
        except Exception as e:
            print(f"[!] AutoPromo error: {e}")
        await asyncio.sleep(PROMO_INTERVAL)

async def spam_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if "http://" in message.text or "https://" in message.text or "t.me/" in message.text:
        try:
            await message.delete()
            await message.chat.kick_member(message.from_user.id)
            await message.reply_text(f"üö´ {message.from_user.first_name} –±—ã–ª —É–¥–∞–ª—ë–Ω –∑–∞ —Å—Å—ã–ª–∫–∏.")
        except:
            pass

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("mystats", mystats))
    app.add_handler(CommandHandler("topreferrers", topreferrers))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
    app.add_handler(MessageHandler(filters.TEXT & filters.Entity("url"), spam_filter))
    app.add_handler(CallbackQueryHandler(role_selected, pattern="^role_"))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), funnel_handler))
    app.run_polling()
