import os
import asyncio
import json
from datetime import datetime
from telegram import Update, ChatPermissions
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

TOKEN = os.getenv("BOT_TOKEN")
REFERRAL_FILE = "referrals.json"
PROMO_INTERVAL = 3600  # –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å
GROUP_ID = int(os.getenv("GROUP_ID"))

def load_data():
    if os.path.exists(REFERRAL_FILE):
        with open(REFERRAL_FILE, "r") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(REFERRAL_FILE, "w") as f:
        json.dump(data, f)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ª–æ–≥–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    ref_by = None
    if context.args:
        ref_by = context.args[0]
    for member in update.message.new_chat_members:
        if ref_by and ref_by != str(member.id):
            data.setdefault(ref_by, [])
            if str(member.id) not in data[ref_by]:
                data[ref_by].append(str(member.id))
                save_data(data)
        await update.message.reply_text(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.full_name}! "
            "–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø üìà"
        )

# /start –∫–æ–º–∞–Ω–¥–∞ —Å —Ä–µ—Ñ-—Å—Å—ã–ª–∫–æ–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    link = f"https://t.me/{context.bot.username}?start={user_id}"
    await update.message.reply_text(
        f"ü§ù –í–æ—Ç —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
{link}"
    )

# /mystats ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö
async def mystats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    user_id = str(update.effective_user.id)
    count = len(data.get(user_id, []))
    await update.message.reply_text(f"üìä –¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª {count} —á–µ–ª–æ–≤–µ–∫(–∞).")

# /topreferrers ‚Äî —Ç–æ–ø 5
async def topreferrers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    top = sorted(data.items(), key=lambda x: len(x[1]), reverse=True)[:5]
    msg = "üèÜ –¢–æ–ø –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏—Ö:
"
    for uid, refs in top:
        user = await context.bot.get_chat(uid)
        msg += f"- {user.first_name}: {len(refs)} —á–µ–ª.
"
    await update.message.reply_text(msg)

# –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞
async def auto_promo(app):
    while True:
        try:
            await app.bot.send_message(
                chat_id=GROUP_ID,
                text="üöÄ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ —Ä–∞—Å—Ç–∏—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ! üî•"
            )
        except Exception as e:
            print(f"[!] AutoPromo error: {e}")
        await asyncio.sleep(PROMO_INTERVAL)

# –§–∏–ª—å—Ç—Ä —Å–ø–∞–º–∞
async def spam_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if "http://" in message.text or "https://" in message.text or "t.me/" in message.text:
        try:
            await message.delete()
            await message.chat.kick_member(message.from_user.id)
            await message.reply_text(f"üö´ {message.from_user.first_name} –±—ã–ª —É–¥–∞–ª—ë–Ω –∑–∞ —Å—Å—ã–ª–∫–∏.")
        except:
            pass

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("mystats", mystats))
    app.add_handler(CommandHandler("topreferrers", topreferrers))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
    app.add_handler(MessageHandler(filters.TEXT & filters.Entity("url"), spam_filter))

    app.job_queue.run_repeating(lambda ctx: ctx.bot.send_message(
        chat_id=GROUP_ID,
        text="üì£ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ! üèÖ"
    ), PROMO_INTERVAL)

    app.run_polling()
